EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
Q1.exe -- emu8086 assembler version: 4.08  
 
[ 5/20/2022  --  11:21:28 PM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       data segment
[   2]    0000: 74 72 79 79 6F 75 72 62 65 73 74 73   str1 db 'tryyourbestsebruoyyrt', 0
                65 62 72 75 6F 79 79 72 74 00       
[   3]    0016: 00 00                                 str_size dw 0
[   4]    0018: 01                                    is_palindrome db 1
[   5]        :                                       
[   6]        :                                       ends
[   7]        :                                       
[   8]        :                                       stack segment
[   9]    0020: 00 00 00 00 00 00 00 00 00 00 00 00   dw   128  dup(0)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00                         
[  10]        :                                       ends
[  11]        :                                       
[  12]        :                                       code segment
[  13]    0120:                                       start:
[  14]    0120: B8 00 00                              mov ax, data
[  15]    0123: 8E D8                                 mov ds, ax
[  16]        :                                       
[  17]    0125: BB 00 00                              lea bx, str1
[  18]    0128: B2 00                                 mov dl, 0
[  19]        :                                       
[  20]    012A:                                       compare:
[  21]    012A: 80 3F 00                              cmp [bx], 0
[  22]    012D: 74 0E                                 je done
[  23]    012F: 80 3F 79                              cmp [bx], 'y'
[  24]    0132: 75 02                                 jne no_inc
[  25]    0134: FE C2                                 inc dl
[  26]        :                                       
[  27]    0136:                                       no_inc:
[  28]    0136: 43                                    inc bx
[  29]    0137: FF 06 16 00                           inc [str_size]
[  30]    013B: EB ED                                 jmp compare
[  31]        :                                       
[  32]    013D:                                       done:
[  33]    013D: BB 00 00                              lea bx, str1
[  34]    0140: BF 00 00                              lea di, str1
[  35]    0143: 03 3E 16 00                           add di, str_size
[  36]    0147: 4F                                    dec di
[  37]    0148:                                       compare2:
[  38]    0148: 3B DF                                 cmp bx , di
[  39]    014A: 77 11                                 ja done2
[  40]    014C: 8B 0F                                 mov cx, [bx]
[  41]    014E: 8B 05                                 mov ax, [di]
[  42]    0150: 3A C1                                 cmp al, cl
[  43]    0152: 75 04                                 jne not_palindrome
[  44]    0154: 43                                    inc bx
[  45]    0155: 4F                                    dec di
[  46]    0156: EB F0                                 jmp compare2
[  47]        :                                       
[  48]        :                                       
[  49]        :                                       
[  50]    0158:                                       not_palindrome:
[  51]    0158: C6 06 18 00 00                        mov [is_palindrome], 0
[  52]        :                                       
[  53]    015D:                                       done2:
[  54]        :                                       
[  55]    015D: B8 00 4C                              mov ax, 4c00h
[  56]    0160: CD 21                                 int 21h
[  57]        :                                       ends
[  58]        :                                       
[  59]        :                                       end start
[  60]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 62      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 02      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 08      -   check sum (l.byte)
0013: 19      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 12      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 12      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
